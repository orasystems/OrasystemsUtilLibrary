//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations 3.2.
//


package com.orasystems.libs.utils.log.view;

import android.content.Context;
import android.content.res.Resources;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.view.Window;
import android.widget.Button;
import android.widget.Spinner;
import com.fima.cardsui.views.CardUI;
import com.orasystems.libs.utils.R.array;
import com.orasystems.libs.utils.R.id;
import com.orasystems.libs.utils.log.LogUtils_;
import org.androidannotations.api.SdkVersionHelper;
import org.androidannotations.api.builder.ActivityIntentBuilder;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;

public final class ActivityLog_
    extends ActivityLog
    implements HasViews, OnViewChangedListener
{

    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();

    @Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        Resources resources_ = this.getResources();
        spTipoValues = resources_.getStringArray(array.spTipoValues);
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        log = LogUtils_.getInstance_(this);
    }

    @Override
    public void setContentView(int layoutResID) {
        super.setContentView(layoutResID);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view, LayoutParams params) {
        super.setContentView(view, params);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view) {
        super.setContentView(view);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static ActivityLog_.IntentBuilder_ intent(Context context) {
        return new ActivityLog_.IntentBuilder_(context);
    }

    public static ActivityLog_.IntentBuilder_ intent(Fragment supportFragment) {
        return new ActivityLog_.IntentBuilder_(supportFragment);
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (((SdkVersionHelper.getSdkInt()< 5)&&(keyCode == KeyEvent.KEYCODE_BACK))&&(event.getRepeatCount() == 0)) {
            onBackPressed();
        }
        return super.onKeyDown(keyCode, event);
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        btnDtFinal = ((Button) hasViews.findViewById(id.btnDtFinal));
        spMetodo = ((Spinner) hasViews.findViewById(id.spMetodo));
        btnDtInicial = ((Button) hasViews.findViewById(id.btnDtInicial));
        logsView = ((CardUI) hasViews.findViewById(id.logsView));
        spTipo = ((Spinner) hasViews.findViewById(id.spTipo));
        if (btnDtFinal!= null) {
            btnDtFinal.setOnClickListener(new OnClickListener() {


                @Override
                public void onClick(View view) {
                    ActivityLog_.this.btnDtFinal(view);
                }

            }
            );
        }
        {
            View view = hasViews.findViewById(id.btnExcluir);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        ActivityLog_.this.btnExcluir(view);
                    }

                }
                );
            }
        }
        if (btnDtInicial!= null) {
            btnDtInicial.setOnClickListener(new OnClickListener() {


                @Override
                public void onClick(View view) {
                    ActivityLog_.this.btnDtInicial(view);
                }

            }
            );
        }
        {
            View view = hasViews.findViewById(id.btnSearch);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        ActivityLog_.this.btnSearch(view);
                    }

                }
                );
            }
        }
        afterViews();
    }

    public static class IntentBuilder_
        extends ActivityIntentBuilder<ActivityLog_.IntentBuilder_>
    {

        private Fragment fragmentSupport_;

        public IntentBuilder_(Context context) {
            super(context, ActivityLog_.class);
        }

        public IntentBuilder_(Fragment fragment) {
            super(fragment.getActivity(), ActivityLog_.class);
            fragmentSupport_ = fragment;
        }

        @Override
        public void startForResult(int requestCode) {
            if (fragmentSupport_!= null) {
                fragmentSupport_.startActivityForResult(intent, requestCode);
            } else {
                super.startForResult(requestCode);
            }
        }

    }

}
